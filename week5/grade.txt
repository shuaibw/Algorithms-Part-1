See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (1 warning)
Checkstyle:   FAILED (0 errors, 3 warnings)

Correctness:  26/35 tests passed
Memory:       16/16 tests passed
Timing:       41/42 tests passed

Aggregate score: 84.10%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
5.7K Aug 12 21:11 KdTree.java
2.2K Aug 12 21:11 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------
PointSET.java:64: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PMD ends with 1 warning.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] PointSET.java:4:1: Do not use 'java.util.Stack'. Instead, use 'edu.princeton.cs.algs4.Stack'. [IllegalImport]
[WARN] PointSET.java:42:9: Do not use 'java.util.Stack'. Instead, use 'edu.princeton.cs.algs4.Stack'. [IllegalType]
[WARN] PointSET.java:42:32: Do not use 'java.util.Stack'. Instead, use 'edu.princeton.cs.algs4.Stack'. [IllegalInstantiation]
Checkstyle ends with 0 errors and 3 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: insert n random points; check size() and isEmpty() after each insertion
        (size may be less than n because of duplicates)
  * 5 random points in a 1-by-1 grid
  * 50 random points in a 8-by-8 grid
  * 100 random points in a 16-by-16 grid
  * 1000 random points in a 128-by-128 grid
  * 5000 random points in a 1024-by-1024 grid
  * 50000 random points in a 65536-by-65536 grid
==> passed

Test 2: insert n random points; check contains() with random query points
  * 1 random points in a 1-by-1 grid
  * 10 random points in a 4-by-4 grid
  * 20 random points in a 8-by-8 grid
  * 10000 random points in a 128-by-128 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 65536-by-65536 grid
==> passed

Test 3: insert random points; check nearest() with random query points
  * 10 random points in a 4-by-4 grid
  * 15 random points in a 8-by-8 grid
  * 20 random points in a 16-by-16 grid
  * 100 random points in a 32-by-32 grid
  * 10000 random points in a 65536-by-65536 grid
==> passed

Test 4: insert random points; check range() with random query rectangles
  * 2 random points and random rectangles in a 2-by-2 grid
  * 10 random points and random rectangles in a 4-by-4 grid
  * 20 random points and random rectangles in a 8-by-8 grid
  * 100 random points and random rectangles in a 16-by-16 grid
  * 1000 random points and random rectangles in a 64-by-64 grid
  * 10000 random points and random rectangles in a 128-by-128 grid
==> passed

Test 5: call methods before inserting any points
 * size() and isEmpty()
 * contains()
 * nearest()
 * range()
==> passed

Test 6: call methods with null argument
  * insert()
  * contains()
  * range()
  * nearest()
==> passed

Test 7: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
==> passed

Test 8: check that two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 50 random general points in a 8-by-8 grid
  * 100000 random general points in a 16-by-16 grid
  * 100000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
==> passed

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
  * 5000 random general points and random rectangles in a 16-by-16 grid
  * 5000 random general points and random rectangles in a 128-by-128 grid
  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> passed

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
    - failed on trial 3 of 10000
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.522, 0.49)
    - student   nearest()           = (0.4, 0.7)
    - reference nearest()           = (0.5, 0.4)
    - student   distanceSquaredTo() = 0.058984
    - reference distanceSquaredTo() = 0.008584

  * input10.txt
    - failed on trial 2 of 10000
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.801, 0.907)
    - student   nearest()           = (0.564, 0.413)
    - reference nearest()           = (0.862, 0.825)
    - student   distanceSquaredTo() = 0.300205
    - reference distanceSquaredTo() = 0.010445

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 13 of 10000
    - sequence of points inserted: 
      A  0.75 0.5
      B  0.5 1.0
      C  0.625 0.75
      D  0.0 0.625
      E  0.875 0.0
    - query point                   = (0.375, 0.125)
    - student   nearest()           = (0.75, 0.5)
    - reference nearest()           = (0.875, 0.0)
    - student   distanceSquaredTo() = 0.28125
    - reference distanceSquaredTo() = 0.265625

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 2 of 10000
    - sequence of points inserted: 
      A  0.75 0.125
      B  0.1875 0.25
      C  0.0 0.375
      D  0.5 0.9375
      E  0.125 0.875
      F  0.6875 0.75
      G  0.0625 0.3125
      H  0.375 0.4375
      I  0.4375 0.0625
      J  0.625 0.5625
    - query point                   = (0.9375, 1.0)
    - student   nearest()           = (0.0, 0.375)
    - reference nearest()           = (0.6875, 0.75)
    - student   distanceSquaredTo() = 1.26953125
    - reference distanceSquaredTo() = 0.125

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.0 0.4375
      B  0.53125 0.03125
      C  0.8125 0.1875
      D  0.3125 0.6875
      E  0.25 1.0
      F  0.875 0.625
      G  0.09375 0.84375
      H  0.4375 0.125
      I  0.03125 0.25
      J  0.65625 0.21875
      K  0.0625 0.59375
      L  0.96875 0.375
      M  0.6875 0.34375
      N  0.90625 0.5625
      O  0.625 0.0
      P  0.40625 0.28125
      Q  0.46875 0.09375
      R  0.1875 0.75
      S  0.28125 0.8125
      T  0.75 0.78125
    - query point                   = (0.71875, 0.65625)
    - student   nearest()           = (0.53125, 0.03125)
    - reference nearest()           = (0.75, 0.78125)
    - student   distanceSquaredTo() = 0.42578125
    - reference distanceSquaredTo() = 0.0166015625

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query point                   = (0.21875, 0.828125)
    - student   nearest()           = (0.1875, 0.65625)
    - reference nearest()           = (0.25, 0.8125)
    - student   distanceSquaredTo() = 0.030517578125
    - reference distanceSquaredTo() = 0.001220703125

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.7039794921875, 0.0367431640625)
    - student   nearest()           = (0.7611236572265625, 0.5932464599609375)
    - reference nearest()           = (0.7032928466796875, 0.0423126220703125)
    - student   distanceSquaredTo() = 0.312961373943835
    - reference distanceSquaredTo() = 0.000031490344554

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.25 0.0
      B  0.75 0.5
      C  0.5 1.0
      D  0.25 1.0
      E  0.0 0.75
      F  0.5 0.75
      G  1.0 1.0
      H  1.0 0.0
      I  0.25 0.25
      J  0.5 0.25
    - query point                   = (0.75, 0.0)
    - student   nearest()           = (0.75, 0.5)
    - reference nearest()           = (1.0, 0.0)
    - student   distanceSquaredTo() = 0.25
    - reference distanceSquaredTo() = 0.0625

  * 15 random distinct points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  1.0 0.75
      B  0.25 0.375
      C  0.125 0.625
      D  0.75 0.25
      E  0.875 1.0
      F  0.375 0.625
      G  0.625 0.125
      H  0.375 0.125
      I  1.0 0.0
      J  0.125 0.125
      K  0.125 0.375
      L  0.0 0.625
      M  0.125 0.75
      N  1.0 0.875
      O  0.375 0.5
    - query point                   = (0.25, 0.25)
    - student   nearest()           = (0.375, 0.125)
    - reference nearest()           = (0.25, 0.375)
    - student   distanceSquaredTo() = 0.03125
    - reference distanceSquaredTo() = 0.015625

  * 20 random distinct points in a 16-by-16 grid
    - failed on trial 2 of 10000
    - sequence of points inserted: 
      A  0.9375 0.5
      B  0.8125 0.875
      C  0.625 0.1875
      D  0.3125 0.375
      E  0.25 0.8125
      F  0.4375 0.8125
      G  0.6875 0.625
      H  0.4375 0.1875
      I  0.0 1.0
      J  0.1875 0.5625
      K  0.0 0.6875
      L  1.0 0.5
      M  0.125 0.625
      N  0.625 0.9375
      O  0.375 0.25
      P  0.75 1.0
      Q  0.1875 0.4375
      R  0.3125 0.5625
      S  0.4375 0.9375
      T  0.375 0.125
    - query point                   = (0.125, 0.75)
    - student   nearest()           = (0.25, 0.8125)
    - reference nearest()           = (0.125, 0.625)
    - student   distanceSquaredTo() = 0.01953125
    - reference distanceSquaredTo() = 0.015625

  * 100 random distinct points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query point                   = (0.59375, 0.875)
    - student   nearest()           = (0.625, 0.78125)
    - reference nearest()           = (0.59375, 0.90625)
    - student   distanceSquaredTo() = 0.009765625
    - reference distanceSquaredTo() = 0.0009765625

  * 10000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.583831787109375, 0.008544921875)
    - student   nearest()           = (0.3664093017578125, 0.30316162109375)
    - reference nearest()           = (0.5858154296875, 0.0096893310546875)
    - student   distanceSquaredTo() = 0.134071536595002
    - reference distanceSquaredTo() = 0.000005244510248

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query point                   = (0.25, 0.9375)
    - student   nearest()           = (0.125, 0.375)
    - reference nearest()           = (0.25, 0.9375)
    - student   distanceSquaredTo() = 0.33203125
    - reference distanceSquaredTo() = 0

  * 10000 random general points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point                   = (0.1796875, 0.96875)
    - student   nearest()           = (0.46875, 0.6796875)
    - reference nearest()           = (0.1796875, 0.96875)
    - student   distanceSquaredTo() = 0.1671142578125
    - reference distanceSquaredTo() = 0

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point                   = (0.130859375, 0.14453125)
    - student   nearest()           = (0.1162109375, 0.1982421875)
    - reference nearest()           = (0.1318359375, 0.146484375)
    - student   distanceSquaredTo() = 0.00309944152832
    - reference distanceSquaredTo() = 0.000004768371582

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - student   nearest() = (0.4, 0.7)
    - reference nearest() = (0.4, 0.7)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.58, 0.74)
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D E 
    - failed on trial 2 of 1000

  * input10.txt
    - student   nearest() = (0.564, 0.413)
    - reference nearest() = (0.32, 0.708)
    - student   distanceSquaredTo() = 0.094445
    - reference distanceSquaredTo() = 0.053044
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.55, 0.72)
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B H I 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B H I C F D 
    - failed on trial 1 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = (0.75, 0.875)
    - reference nearest() = (0.5, 0.75)
    - student   distanceSquaredTo() = 0.265625
    - reference distanceSquaredTo() = 0.15625
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.625, 0.375)
    - sequence of points inserted: 
      A  0.75 0.875
      B  0.875 0.0
      C  0.125 0.625
      D  1.0 0.25
      E  0.5 0.75
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A C E 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A C E B D 
    - failed on trial 1 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (1.0, 0.25)
    - reference nearest() = (0.8125, 0.375)
    - student   distanceSquaredTo() = 0.06640625
    - reference distanceSquaredTo() = 0.0390625
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.75, 0.1875)
    - sequence of points inserted: 
      A  0.3125 0.3125
      B  1.0 0.25
      C  0.25 0.4375
      D  0.0625 1.0
      E  0.5625 0.9375
      F  0.9375 0.8125
      G  0.1875 0.125
      H  0.4375 0.0625
      I  0.0 0.5625
      J  0.8125 0.375
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B H 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B H E F J 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.0, 0.40625)
    - reference nearest() = (0.34375, 0.6875)
    - student   distanceSquaredTo() = 0.2587890625
    - reference distanceSquaredTo() = 0.0048828125
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.375, 0.75)
    - sequence of points inserted: 
      A  0.5 0.78125
      B  0.53125 0.875
      C  0.65625 0.15625
      D  0.90625 0.65625
      E  0.8125 0.21875
      F  0.625 0.53125
      G  0.59375 0.1875
      H  0.03125 0.125
      I  0.5625 0.8125
      J  0.875 0.375
      K  0.6875 0.59375
      L  0.0 0.40625
      M  0.34375 0.6875
      N  0.21875 0.03125
      O  0.9375 0.0625
      P  0.4375 0.09375
      Q  0.0625 0.625
      R  0.78125 0.90625
      S  0.09375 0.9375
      T  0.125 0.28125
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A H L M S 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A H L M S Q T 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.421875, 0.796875)
    - reference nearest() = (0.15625, 0.390625)
    - student   distanceSquaredTo() = 0.2744140625
    - reference distanceSquaredTo() = 0.020751953125
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 7
    - number of reference entries = 14
    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.65625, 0.4140625)
    - reference nearest() = (0.8203125, 0.9375)
    - student   distanceSquaredTo() = 0.26739501953125
    - reference distanceSquaredTo() = 0.04132080078125
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 11
    - number of reference entries = 21
    - entry 10 of the two sequences are not equal
    - student   entry 10 = (0.3359375, 0.765625)
    - reference entry 10 = (0.8125, 0.8046875)

    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.41845703125, 0.03662109375)
    - reference nearest() = (0.7568359375, 0.1083984375)
    - student   distanceSquaredTo() = 0.106385231018066
    - reference distanceSquaredTo() = 0.000391483306885
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 13
    - number of reference entries = 27
    - failed on trial 1 of 1000

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()
  * nearest()
  * range()
==> passed

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 64 of 20000
    - student   nearest()  = (0.625, 0.625)
    - reference nearest()  = (0.3125, 0.5625)
    - student   distanceSquaredTo() = 0.125
    - reference distanceSquaredTo() = 0.0390625

  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 13 of 20000
    - student   nearest()  = (0.1640625, 0.671875)
    - reference nearest()  = (0.578125, 0.234375)
    - student   distanceSquaredTo() = 0.42486572265625
    - reference distanceSquaredTo() = 0.400390625
    - sequence of operations was:
           st.insert(0.578125, 0.234375)
           st.contains((0.078125, 0.6171875))  ==>  false
           st.insert(0.140625, 0.3515625)
           st.contains((0.5390625, 0.3359375))  ==>  false
           st.range([0.1875, 0.5390625] x [0.1171875, 0.578125])  ==>  empty
           st.insert(0.1640625, 0.671875)
           st.contains((0.75, 0.5859375))  ==>  false
           st.contains((0.59375, 0.4296875))  ==>  false
           st.insert(0.265625, 0.0859375)
           st.size()  ==>  4
           st.insert(0.1171875, 0.203125)
           st.range([0.1875, 0.7734375] x [0.546875, 0.8046875])  ==>  empty
           st.nearest((0.796875, 0.828125))   ==>  (0.1640625, 0.671875)

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 18 of 20000
    - student   nearest()  = (0.46484375, 0.009765625)
    - reference nearest()  = (0.2158203125, 0.5810546875)
    - student   distanceSquaredTo() = 0.937335968017578
    - reference distanceSquaredTo() = 0.50615119934082
    - sequence of operations was:
           st.insert(0.46484375, 0.009765625)
           st.size()  ==>  1
           st.range([0.0537109375, 0.5625] x [0.126953125, 0.21484375])  ==>  empty
           st.contains((0.076171875, 0.333984375))  ==>  false
           st.nearest((0.6484375, 0.9345703125))   ==>  (0.46484375, 0.009765625)
           st.nearest((0.81640625, 0.88671875))   ==>  (0.46484375, 0.009765625)
           st.insert(0.2158203125, 0.5810546875)
           st.contains((0.08203125, 0.1396484375))  ==>  false
           st.insert(0.375, 0.087890625)
           st.range([0.552734375, 0.619140625] x [0.0, 0.296875])  ==>  empty
           st.range([0.0458984375, 0.1640625] x [0.525390625, 0.8564453125])  ==>  empty
           st.range([0.0185546875, 0.2392578125] x [0.4189453125, 0.7099609375])  ==>  D 
           st.nearest((0.9541015625, 0.099609375))   ==>  (0.46484375, 0.009765625)
           st.range([0.365234375, 0.5341796875] x [0.03125, 0.560546875])  ==>  I 
           st.contains((0.0283203125, 0.4052734375))  ==>  false
           st.range([0.12890625, 0.7119140625] x [0.697265625, 0.93359375])  ==>  empty
           st.range([0.853515625, 0.90234375] x [0.482421875, 0.5146484375])  ==>  empty
           st.nearest((0.853515625, 0.896484375))   ==>  (0.46484375, 0.009765625)

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 27 of 20000
    - student   nearest()  = (0.7681884765625, 0.4417724609375)
    - reference nearest()  = (0.720458984375, 0.8206787109375)
    - student   distanceSquaredTo() = 0.108284950256348
    - reference distanceSquaredTo() = 0.009369865059853

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 34 of 20000
    - student   nearest()  = (0.7991790771484375, 0.6192474365234375)
    - reference nearest()  = (0.8209381103515625, 0.287506103515625)
    - student   distanceSquaredTo() = 0.099968750029802
    - reference distanceSquaredTo() = 0.003163173096254

==> FAILED

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 6 of 20000
    - student   nearest()  = (0.8125, 0.6875)
    - reference nearest()  = (0.25, 0.3125)
    - student   distanceSquaredTo() = 0.1328125
    - reference distanceSquaredTo() = 0.09765625
    - sequence of operations was:
           st.insert(0.375, 1.0)
           st.insert(0.8125, 0.6875)
           st.insert(0.25, 0.3125)
           st.range([0.0, 0.75] x [0.4375, 0.75])  ==>  empty
           st.size()  ==>  3
           st.nearest((0.5, 0.5))   ==>  (0.8125, 0.6875)

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 9 of 20000
    - student   nearest()  = (0.8671875, 0.0859375)
    - reference nearest()  = (0.640625, 0.6484375)
    - student   distanceSquaredTo() = 0.31646728515625
    - reference distanceSquaredTo() = 0.054931640625
    - sequence of operations was:
           st.insert(0.8671875, 0.0859375)
           st.isEmpty()  ==>  false
           st.nearest((0.7578125, 0.953125))   ==>  (0.8671875, 0.0859375)
           st.range([0.484375, 0.828125] x [0.3984375, 0.65625])  ==>  empty
           st.contains((0.8984375, 0.0078125))  ==>  false
           st.insert(0.640625, 0.6484375)
           st.contains((0.7421875, 0.796875))  ==>  false
           st.insert(0.3359375, 0.046875)
           st.nearest((0.875, 0.6484375))   ==>  (0.8671875, 0.0859375)

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 6 of 20000
    - student   nearest()  = (0.5185546875, 0.908203125)
    - reference nearest()  = (0.7197265625, 0.7607421875)
    - student   distanceSquaredTo() = 0.0943603515625
    - reference distanceSquaredTo() = 0.045506477355957
    - sequence of operations was:
           st.insert(0.74609375, 0.3232421875)
           st.insert(0.7197265625, 0.7607421875)
           st.isEmpty()  ==>  false
           st.insert(0.5185546875, 0.908203125)
           st.nearest((0.5048828125, 0.2890625))   ==>  (0.74609375, 0.3232421875)
           st.nearest((0.8232421875, 0.947265625))   ==>  (0.5185546875, 0.908203125)

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 62 of 20000
    - student   nearest()  = (0.7332763671875, 0.9281005859375)
    - reference nearest()  = (0.1435546875, 0.5931396484375)
    - student   distanceSquaredTo() = 0.344853654503822
    - reference distanceSquaredTo() = 0.008298456668854

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 11 of 20000
    - student   nearest()  = (0.9880523681640625, 0.74267578125)
    - reference nearest()  = (0.5541534423828125, 0.1873321533203125)
    - student   distanceSquaredTo() = 0.187834684038535
    - reference distanceSquaredTo() = 0.082807307131588
    - sequence of operations was:
           st.insert(0.547332763671875, 0.895416259765625)
           st.nearest((0.6610107421875, 0.020721435546875))   ==>  (0.547332763671875, 0.895416259765625)
           st.insert(0.25341796875, 0.02569580078125)
           st.insert(0.1368865966796875, 0.5383148193359375)
           st.range([0.575836181640625, 0.6503143310546875] x [0.445709228515625, 0.79351806640625])  ==>  empty
           st.insert(0.9880523681640625, 0.74267578125)
           st.size()  ==>  4
           st.contains((0.4450225830078125, 0.1523895263671875))  ==>  false
           st.insert(0.5541534423828125, 0.1873321533203125)
           st.nearest((0.2183990478515625, 0.6593780517578125))   ==>  (0.1368865966796875, 0.5383148193359375)
           st.nearest((0.7841949462890625, 0.3602142333984375))   ==>  (0.9880523681640625, 0.74267578125)

==> FAILED

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 36 of 20000
    - student   nearest()  = (0.0, 0.0)
    - reference nearest()  = (1.0, 1.0)
    - student   distanceSquaredTo() = 2
    - reference distanceSquaredTo() = 0

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 14 of 20000
    - student   nearest()  = (0.25, 1.0)
    - reference nearest()  = (0.0, 0.875)
    - student   distanceSquaredTo() = 0.0390625
    - reference distanceSquaredTo() = 0.0078125
    - sequence of operations was:
           st.insert(0.875, 0.8125)
           st.range([0.375, 0.625] x [0.75, 0.875])  ==>  empty
           st.contains((0.75, 1.0))  ==>  false
           st.insert(0.0, 0.875)
           st.range([0.5625, 0.625] x [0.0, 0.8125])  ==>  empty
           st.range([0.125, 0.8125] x [0.3125, 0.9375])  ==>  empty
           st.nearest((0.9375, 0.5))   ==>  (0.875, 0.8125)
           st.contains((0.75, 0.1875))  ==>  false
           st.insert(0.25, 1.0)
           st.insert(0.625, 0.0)
           st.insert(0.4375, 0.0625)
           st.nearest((0.5, 0.0625))   ==>  (0.4375, 0.0625)
           st.insert(0.5, 0.1875)
           st.nearest((0.0625, 0.9375))   ==>  (0.25, 1.0)

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 12 of 20000
    - student   nearest()  = (0.5234375, 0.515625)
    - reference nearest()  = (0.75, 0.0859375)
    - student   distanceSquaredTo() = 0.17950439453125
    - reference distanceSquaredTo() = 0.07061767578125
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.03125, 0.3203125)
           st.insert(0.5234375, 0.515625)
           st.contains((0.9921875, 0.6484375))  ==>  false
           st.insert(0.2265625, 0.640625)
           st.contains((0.5078125, 0.796875))  ==>  false
           st.range([0.4609375, 0.484375] x [0.296875, 0.390625])  ==>  empty
           st.contains((0.03125, 0.046875))  ==>  false
           st.nearest((0.8671875, 0.1875))   ==>  (0.5234375, 0.515625)
           st.range([0.015625, 0.734375] x [0.2421875, 0.6640625])  ==>  A S A 
           st.insert(0.75, 0.0859375)
           st.nearest((0.484375, 0.09375))   ==>  (0.5234375, 0.515625)

  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 22 of 20000
    - student   nearest()  = (0.4423828125, 0.8134765625)
    - reference nearest()  = (0.49609375, 0.6796875)
    - student   distanceSquaredTo() = 0.147354125976562
    - reference distanceSquaredTo() = 0.058938980102539
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.size()  ==>  0
           st.insert(0.2333984375, 0.796875)
           st.range([0.1552734375, 0.9013671875] x [0.33984375, 0.623046875])  ==>  empty
           st.size()  ==>  1
           st.range([0.03125, 0.53125] x [0.5556640625, 0.9638671875])  ==>  N 
           st.insert(0.4423828125, 0.8134765625)
           st.insert(0.1162109375, 0.7099609375)
           st.nearest((0.5927734375, 0.787109375))   ==>  (0.4423828125, 0.8134765625)
           st.size()  ==>  3
           st.insert(0.2158203125, 0.095703125)
           st.nearest((0.59765625, 0.5859375))   ==>  (0.4423828125, 0.8134765625)
           st.insert(0.49609375, 0.6796875)
           st.nearest((0.2265625, 0.1982421875))   ==>  (0.2158203125, 0.095703125)
           st.isEmpty()  ==>  false
           st.nearest((0.423828125, 0.845703125))   ==>  (0.4423828125, 0.8134765625)
           st.insert(0.546875, 0.130859375)
           st.range([0.3740234375, 0.5673828125] x [0.1904296875, 0.3974609375])  ==>  empty
           st.contains((0.3115234375, 0.916015625))  ==>  false
           st.range([0.384765625, 0.6572265625] x [0.041015625, 0.3779296875])  ==>  N 
           st.contains((0.0029296875, 0.326171875))  ==>  false
           st.nearest((0.6416015625, 0.4853515625))   ==>  (0.4423828125, 0.8134765625)

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 10 of 20000
    - student   nearest()  = (0.6541748046875, 0.7860107421875)
    - reference nearest()  = (0.2020263671875, 0.134521484375)
    - student   distanceSquaredTo() = 0.538458347320557
    - reference distanceSquaredTo() = 0.020665064454079
    - sequence of operations was:
           st.insert(0.9351806640625, 0.569091796875)
           st.insert(0.0614013671875, 0.839599609375)
           st.isEmpty()  ==>  false
           st.range([0.6217041015625, 0.929931640625] x [0.168701171875, 0.3143310546875])  ==>  empty
           st.insert(0.2020263671875, 0.134521484375)
           st.insert(0.107421875, 0.448486328125)
           st.nearest((0.8990478515625, 0.076171875))   ==>  (0.9351806640625, 0.569091796875)
           st.insert(0.6541748046875, 0.7860107421875)
           st.insert(0.1773681640625, 0.090087890625)
           st.nearest((0.3450927734375, 0.1204833984375))   ==>  (0.6541748046875, 0.7860107421875)

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   nearest()  = (0.169464111328125, 0.613372802734375)
    - reference nearest()  = (0.166351318359375, 0.747314453125)
    - student   distanceSquaredTo() = 0.07000899547711
    - reference distanceSquaredTo() = 0.019225374329835
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.insert(0.166351318359375, 0.747314453125)
           st.insert(0.169464111328125, 0.613372802734375)
           st.insert(0.2263946533203125, 0.5290069580078125)
           st.nearest((0.2283782958984375, 0.8713226318359375))   ==>  (0.169464111328125, 0.613372802734375)

==> FAILED

Test 10: insert n random points into two different KdTree objects;
        check that repeated calls to size(), contains(), range(),
        and nearest() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed


Total: 18/27 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes

================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes

================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          240                264
=> passed        2          336                360
=> passed        5          624                648
=> passed       10         1104               1128
=> passed       25         2544               2568
=> passed      100         9744               9768
=> passed      400        38544              38568
=> passed      800        76944              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 144.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          168                160
=> passed        2          304                288
=> passed        5          712                672
=> passed       10         1392               1312
=> passed       25         3432               3232
=> passed      100        13632              12832
=> passed      400        54432              51232
=> passed      800       108832             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 136.00 n + 32.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1788514         
=> passed   320000    1781302         
=> passed   640000    1668508         
=> passed  1280000    1365902         
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1008555         
=> passed   320000     887524         
=> passed   640000     840825         
=> passed  1280000     689506         
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4168         
=> passed    20000       1433         
=> passed    40000        657         
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       5467         
=> passed    20000       1699         
=> passed    40000        720         
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000     739249               1.0              91.1              87.1               0.0         
=> passed   320000     868216               1.0              92.7              88.7               0.0         
=> passed   640000     730886               1.0              98.7              94.7               0.0         
=> FAILED  1280000     673763               1.0             107.1   (1.1x)    103.1               0.0         
==> 3/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000    1217889              37.0              35.0               0.0         
=> passed    20000    1192532              39.3              37.3               0.0         
=> passed    40000    1097823              43.6              41.6               0.0         
=> passed    80000     870800              44.0              42.0               0.0         
=> passed   160000     865186              46.5              44.5               0.0         
=> passed   320000     655072              50.1              48.1               0.0         
=> passed   640000     660488              51.4              49.4               0.0         
=> passed  1280000     470572              54.4              52.4               0.0         
==> 8/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     594431              49.4              31.1              50.1              12.1         
=> passed    20000     558400              51.7              32.6              53.3              16.2         
=> passed    40000     492692              63.9              39.3              63.1              14.1         
=> passed    80000     396960              66.1              40.7              65.2              14.9         
=> passed   160000     361737              69.0              42.5              70.9              20.4         
=> passed   320000     255872              66.0              40.2              65.2              15.7         
=> passed   640000     270510              71.0              43.3              70.7              19.2         
=> passed  1280000     226386              77.7              47.0              74.8              14.2         
==> 8/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> passed    10000   812555                   9.0                    7.8                    50.8              48.8         
=> passed    20000  1016375                  10.0                    8.5                    55.8              53.7         
=> passed    40000   886125                  10.6                   10.8                    66.4              64.3         
=> passed    80000   783609                  11.9                   10.3                    66.8              64.8         
=> passed   160000   613814                  11.5                   12.5                    74.8              72.8         
=> passed   320000   531250                  13.0                   12.3                    77.1              75.1         
=> passed   640000   431693                  13.7                   12.2                    77.9              75.9         
=> passed  1280000   541993                  15.7                   13.3                    86.6              84.6         
==> 8/8 tests passed



Total: 27/28 tests passed!


================================================================
