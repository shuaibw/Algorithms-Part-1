See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (2 warnings)
Checkstyle:   FAILED (0 errors, 5 warnings)

Correctness:  50/51 tests passed
Memory:       19/22 tests passed
Timing:       54/125 tests passed

Aggregate score: 86.10%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
4.9K Aug  8 20:37 Board.java
4.2K Aug  8 20:37 Solver.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L D PZLA_PREFER_ZERO_LENGTH_ARRAYS PZLA: Should 'swap()' return a zero-length array instead of null?  At Board.java:[line 114]


================================================================


% pmd .
*-----------------------------------------------------------
Board.java:106: Return an empty array rather than null. [ReturnEmptyArrayRatherThanNull]
Solver.java:33: The private instance (or static) variable 'min' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 2 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Board.java:71:17: Do not use the 'instanceof' operator in this course. Use 'getClass()' to compare classes. [IllegalToken]
[WARN] Solver.java:26:35: Do not use the letter 'o' as a parameter variable name. It is hard to distinguish from the number '0'. [ParameterName]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------
[WARN] Board.java:72:16: Calling the 'toString()' method in equals()' will slow down the 'equals()' method substantially. [Performance]
[WARN] Board.java:72:39: Calling the 'toString()' method in equals()' will slow down the 'equals()' method substantially. [Performance]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------
[WARN] Solver.java:21:29: You should not need to call 'hamming()' in this program. Instead, submit the version with 'manhattan()'. [Performance]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 26 total tests.

Tests 4-7 and 14-17 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 6a: check neighbors() of neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 8a: check isGoal() with file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check that two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * transitive
  * argument is null
  * argument is of type String
  * argument is of type UncastableString
  * Board object stored in a variable of type Object
==> passed

Test 10b: check correctness of equals() on random n-by-n boards
  * n = 2
  * n = 3
  * n = 4
  * 5 <= n < 10
==> passed

Test 10c: check equals() when board sizes m and n are different
  * m = 4, n = 5
  * m = 2, n = 5
  * m = 5, n = 3
  * m = 2, n = 3
  * m = 3, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: check dimension() on a board that is kth neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: check hamming() on a board that is kth neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 15: check manhattan() on a board that is a kth neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 16: check hamming() on a board that is a kth twin of a board
  * 0th twin of puzzle27.txt
  * 1st twin of puzzle27.txt
  * 2nd twin of puzzle27.txt
  * 13th twin of puzzle27.txt
  * 13th twin of puzzle00.txt
  * 13th twin of puzzle2x2-unsolvable1.txt
==> passed

Test 17: check manhattan() on a board that is a kth twin of a board
  * 0th twin of puzzle27.txt
  * 1st twin of puzzle27.txt
  * 2nd twin of puzzle27.txt
  * 13th twin of puzzle27.txt
  * 13th twin of puzzle00.txt
  * 13th twin of puzzle2x2-unsolvable1.txt
==> passed


Total: 26/26 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     2           136                  128
=> passed     3           200                  192
=> passed     4           248                  240
=> passed     8           568                  560
=> passed    12          1016                 1008
=> passed    16          1592                 1584
=> passed    20          2296                 2288
=> passed    37          6864                 6856
=> passed    72         23096                23088
=> passed   120         61496                61488
==> 10/10 tests passed

Total: 10/10 tests passed!

Student   memory = 4.00 n^2 + 32.00 n + 56.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)


================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 1b: check solution() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 2a: check moves() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 2b: check solution() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 3a: check moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 3b: check solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 6: check moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 7: check solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
  * random 2-by-2 unsolvable boards
==> passed

Test 9a: check that equals() method in Board is called
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9b: check that equals() method in Board is called only
         with an argument of type Board
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9c: check that equals() method in Board is called only
         with a neighbor of a neighbor as an argument
  * puzzle00.txt
  * puzzle04.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests either a bug in the critical optimization or an unnecessary
      call to equals() for some purpose other than the critical optimization
    - board 1:
        3
         0  1  3 
         4  2  5 
         7  8  6 

    - board 2:
        3
         4  1  3 
         0  2  5 
         7  8  6 

  * puzzle05.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests either a bug in the critical optimization or an unnecessary
      call to equals() for some purpose other than the critical optimization
    - board 1:
        3
         0  1  3 
         4  2  5 
         7  8  6 

    - board 2:
        3
         4  1  3 
         0  2  5 
         7  8  6 

  * puzzle10.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests either a bug in the critical optimization or an unnecessary
      call to equals() for some purpose other than the critical optimization
    - board 1:
        3
         0  1  3 
         4  2  5 
         7  8  6 

    - board 2:
        3
         4  1  3 
         0  2  5 
         7  8  6 

  * puzzle27.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests either a bug in the critical optimization or an unnecessary
      call to equals() for some purpose other than the critical optimization
    - board 1:
        3
         0  1  3 
         4  2  5 
         7  8  6 

    - board 2:
        3
         4  1  3 
         0  2  5 
         7  8  6 

==> FAILED

Test 10: check that constructor throws exception if board is null
==> passed

Test 11a: check moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 11b: check solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 12a: check moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 12b: check solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 13a: check moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 13b: check solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 14a: check moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed

Test 14b: check solution() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed


Total: 24/25 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Board)
********************************************************************************

Analyzing memory of Solver
*-----------------------------------------------------------
Running 12 total tests.

Maximum allowed time per puzzle is 5.0 seconds.
Maximum allowed memory per puzzle = 200000000 bytes.

Test 1: Measure memory of Solver.

               filename   moves   memory
---------------------------------------------
=> passed  puzzle10.txt      10     4784         
=> passed  puzzle15.txt      15     5792         
=> passed  puzzle20.txt      20     3056         
=> passed  puzzle25.txt      25     3776         
=> passed  puzzle30.txt      30     4496         
=> passed  puzzle35.txt      35     6080         
==> 6/6 tests passed



Test 2: Measure memory of MinPQ.

                              deep              max           ending
               filename     memory             size             size
--------------------------------------------------------------------
=> passed  puzzle10.txt      23104               33               32         
=> passed  puzzle15.txt      29440               51               50         
=> passed  puzzle20.txt     292576              793              792         
=> FAILED  puzzle25.txt    2863440   (1.1x)    7843   (1.1x)    7842   (1.1x)
=> FAILED  puzzle30.txt   19115136   (1.8x)   50839   (1.7x)   50838   (1.7x)
=> FAILED  puzzle35.txt  188073224   (1.2x)  539544   (1.1x)  539543   (1.1x)
==> 3/6 tests passed


Total: 9/12 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference Board)
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 125 total tests.

Maximum allowed time per puzzle is 5.0 seconds.

Test 1: Measure CPU time and check correctness

               filename   moves    n  seconds
---------------------------------------------
=> passed  puzzle20.txt      20    3     0.01 
=> passed  puzzle22.txt      22    3     0.01 
=> passed  puzzle21.txt      21    3     0.01 
=> passed  puzzle23.txt      23    3     0.01 
=> passed  puzzle24.txt      24    3     0.01 
=> passed  puzzle25.txt      25    3     0.02 
=> passed  puzzle27.txt      27    3     0.02 
=> passed  puzzle29.txt      29    3     0.04 
=> passed  puzzle26.txt      26    3     0.01 
=> passed  puzzle28.txt      28    3     0.05 
=> passed  puzzle30.txt      30    3     0.12 
=> passed  puzzle31.txt      31    3     0.16 
=> passed  puzzle39.txt      39    4     0.24 
=> passed  puzzle41.txt      41    5     0.21 
=> passed  puzzle34.txt      34    4     0.46 
=> passed  puzzle37.txt      37    4     0.33 
=> passed  puzzle44.txt      44    5     0.87 
=> passed  puzzle32.txt      32    4     2.02 
=> passed  puzzle35.txt      35    4     1.25 
=> passed  puzzle33.txt      33    4     1.73 
=> passed  puzzle43.txt      43    4     4.86 
=> passed  puzzle46.txt      46    4     3.36 
=> passed  puzzle40.txt      40    4     1.97 
=> FAILED  puzzle36.txt      36    4    11.94 (>= 5.0 seconds)

Exceeded CPU limit of 5.0 seconds per puzzle. Aborting tests.

==> 23/25 tests passed



Test 2: Count MinPQ operations

               filename   insert()         delMin()
---------------------------------------------------
=> passed  puzzle20.txt       1976             1184         
=> passed  puzzle22.txt       4632             2762         
=> passed  puzzle21.txt       5485             3268         
=> FAILED  puzzle23.txt      10585   (1.1x)    6296   (1.1x)
=> passed  puzzle24.txt       6988             4240         
=> FAILED  puzzle25.txt      19434   (1.1x)   11592   (1.1x)
=> FAILED  puzzle27.txt      23253   (1.2x)   14114   (1.2x)
=> FAILED  puzzle29.txt      47899   (2.4x)   29166   (2.4x)
=> passed  puzzle26.txt      16549             9988         
=> FAILED  puzzle28.txt      59971   (1.3x)   36254   (1.3x)
=> FAILED  puzzle30.txt     129142   (1.7x)   78304   (1.7x)
=> FAILED  puzzle31.txt     165409   (2.1x)  100712   (2.1x)
=> FAILED  puzzle39.txt     243852   (2.0x)  118852   (1.9x)
=> passed  puzzle41.txt     157996            68084         
=> FAILED  puzzle34.txt     450658   (1.7x)  216688   (1.7x)
=> FAILED  puzzle37.txt     339874   (1.2x)  163602   (1.2x)
=> FAILED  puzzle44.txt     646591   (1.3x)  290706   (1.3x)
=> FAILED  puzzle32.txt    1502069   (1.6x)  717432   (1.6x)
=> FAILED  puzzle35.txt    1070519   (1.2x)  530976   (1.2x)
=> FAILED  puzzle33.txt    1462080   (1.3x)  703658   (1.3x)
=> FAILED  puzzle43.txt    3647837   (2.0x) 1789544   (2.0x)
=> FAILED  puzzle46.txt    2556242   (1.4x) 1285270   (1.4x)
=> passed  puzzle40.txt    1617345           796482         
=> FAILED  puzzle36.txt    8185799   (2.2x) 3978438   (2.2x)
==> 7/25 tests passed



Test 3: Count Board operations (that should not get called)

               filename    hamming()   toString()
-------------------------------------------------
=> passed  puzzle20.txt          1976            0         
=> passed  puzzle22.txt          4632            0         
=> passed  puzzle21.txt          5485            0         
=> passed  puzzle23.txt          10585            0         
=> passed  puzzle24.txt          6988            0         
=> passed  puzzle25.txt          19434            0         
=> passed  puzzle27.txt          23253            0         
=> passed  puzzle29.txt          47899            0         
=> passed  puzzle26.txt          16549            0         
=> passed  puzzle28.txt          59971            0         
=> passed  puzzle30.txt          129142            0         
=> passed  puzzle31.txt          165409            0         
=> passed  puzzle39.txt          243852            0         
=> passed  puzzle41.txt          157996            0         
=> passed  puzzle34.txt          450658            0         
=> passed  puzzle37.txt          339874            0         
=> passed  puzzle44.txt          646591            0         
=> passed  puzzle32.txt          1502069            0         
=> passed  puzzle35.txt          1070519            0         
=> passed  puzzle33.txt          1462080            0         
=> passed  puzzle43.txt          3647837            0         
=> passed  puzzle46.txt          2556242            0         
=> passed  puzzle40.txt          1617345            0         
=> passed  puzzle36.txt          8185799            0         
==> 24/25 tests passed



Test 4a: Count Board operations (that should get called)

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> FAILED  puzzle20.txt       3156               23030   (5.7x)       3160         
=> FAILED  puzzle22.txt       7390               63354   (6.5x)       7394         
=> FAILED  puzzle21.txt       8759               73208   (7.4x)       8753         
=> FAILED  puzzle23.txt      16877   (1.1x)     154840  (10.5x)      16881         
=> FAILED  puzzle24.txt      11224               99998   (6.6x)      11228         
=> FAILED  puzzle25.txt      31031   (1.1x)     311881  (10.9x)      31026         
=> FAILED  puzzle27.txt      37375   (1.2x)     378466  (12.1x)      37367         
=> FAILED  puzzle29.txt      77061   (2.4x)     878546  (26.8x)      77065         
=> FAILED  puzzle26.txt      26533              267177   (8.0x)      26537         
=> FAILED  puzzle28.txt      96241   (1.3x)    1093800  (14.5x)      96225         
=> FAILED  puzzle30.txt     207504   (1.7x)    2545357  (21.0x)     207446         
=> FAILED  puzzle31.txt     266130   (2.1x)    3420316  (26.5x)     266121         
=> FAILED  puzzle39.txt     362713   (1.9x)    4374293  (23.5x)     362704         
=> FAILED  puzzle41.txt     226076             2944838  (10.1x)     226080         
=> FAILED  puzzle34.txt     667446   (1.7x)    8558923  (21.8x)     667346         
=> FAILED  puzzle37.txt     503489   (1.2x)    6544036  (15.1x)     503476         
=> FAILED  puzzle44.txt     937305   (1.3x)   13195499  (18.9x)     937297         
=> FAILED  puzzle32.txt    2220593   (1.6x)   28747766  (21.3x)    2219501         
=> FAILED  puzzle35.txt    1601719   (1.2x)   20685248  (15.0x)    1601495         
=> FAILED  puzzle33.txt    2166523   (1.3x)   29444771  (18.3x)    2165738         
=> FAILED  puzzle43.txt    5437505   (2.0x)   88124571  (32.2x)    5437381         
=> FAILED  puzzle46.txt    3841511   (1.4x)   62083225  (22.9x)    3841512         
=> FAILED  puzzle40.txt    2413955            35731964  (12.4x)    2413827         
=> FAILED  puzzle36.txt   12166254   (2.2x)  185431743  (34.2x)   12164237         
==> 0/25 tests passed



Test 4b: count Board operations (that should get called),
         rejecting if doesn't adhere to stricter caching limits

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> FAILED  puzzle20.txt       3156               23030   (5.7x)       3160         
=> FAILED  puzzle22.txt       7390               63354   (6.5x)       7394         
=> FAILED  puzzle21.txt       8759               73208   (7.4x)       8753         
=> FAILED  puzzle23.txt      16877   (1.1x)     154840  (10.5x)      16881   (1.1x)
=> FAILED  puzzle24.txt      11224               99998   (6.6x)      11228         
=> FAILED  puzzle25.txt      31031   (1.1x)     311881  (10.9x)      31026   (1.1x)
=> FAILED  puzzle27.txt      37375   (1.2x)     378466  (12.1x)      37367   (1.2x)
=> FAILED  puzzle29.txt      77061   (2.4x)     878546  (26.8x)      77065   (2.4x)
=> FAILED  puzzle26.txt      26533              267177   (8.0x)      26537         
=> FAILED  puzzle28.txt      96241   (1.3x)    1093800  (14.5x)      96225   (1.3x)
=> FAILED  puzzle30.txt     207504   (1.7x)    2545357  (21.0x)     207446   (1.7x)
=> FAILED  puzzle31.txt     266130   (2.1x)    3420316  (26.5x)     266121   (2.1x)
=> FAILED  puzzle39.txt     362713   (1.9x)    4374293  (23.5x)     362704   (1.9x)
=> FAILED  puzzle41.txt     226076             2944838  (10.1x)     226080         
=> FAILED  puzzle34.txt     667446   (1.7x)    8558923  (21.8x)     667346   (1.7x)
=> FAILED  puzzle37.txt     503489   (1.2x)    6544036  (15.1x)     503476   (1.2x)
=> FAILED  puzzle44.txt     937305   (1.3x)   13195499  (18.9x)     937297   (1.3x)
=> FAILED  puzzle32.txt    2220593   (1.6x)   28747766  (21.3x)    2219501   (1.6x)
=> FAILED  puzzle35.txt    1601719   (1.2x)   20685248  (15.0x)    1601495   (1.2x)
=> FAILED  puzzle33.txt    2166523   (1.3x)   29444771  (18.3x)    2165738   (1.3x)
=> FAILED  puzzle43.txt    5437505   (2.0x)   88124571  (32.2x)    5437381   (2.0x)
=> FAILED  puzzle46.txt    3841511   (1.4x)   62083225  (22.9x)    3841512   (1.4x)
=> FAILED  puzzle40.txt    2413955            35731964  (12.4x)    2413827         
=> FAILED  puzzle36.txt   12166254   (2.2x)  185431743  (34.2x)   12164237   (2.2x)
==> 0/25 tests passed


Total: 54/125 tests passed!


================================================================